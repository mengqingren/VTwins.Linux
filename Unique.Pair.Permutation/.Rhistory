filter(name %in% c(edges$from, edges$to)) %>%
droplevels()
vertices$size <- runif(nrow(vertices))
# Rebuild the graph object
mygraph <- graph_from_data_frame(edges, vertices=vertices)
ggraph(mygraph, layout = 'circlepack') +
geom_node_circle(aes(fill = depth)) +
geom_node_label( aes(label=shortName, filter=leaf, size=size)) +
theme_void() +
theme(legend.position="FALSE") +
scale_fill_viridis()
??pheatmap
?pheatmap
??pheatmap
library(pheatmap)
?pheatmap
install.packages("Seurat")
install.packages("Seurat")
install.packages("Rtools")
BiocManager::install("Seurat")
BiocManager::install("Seurat")
install.packages("installr")
library(installr)
options(repos="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")
install.packages('Seurat')
library(curatedMetagenomicData)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(tidyverse)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool", dryrun=FALSE)
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool", dryrun=FALSE)
curatedMetagenomicData()
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
data(GlobalPatterns)
library("phyloseq")
library("ggplot2")
data(GlobalPatterns)
View(GlobalPatterns)
GlobalPatterns@otu_table
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool",
dryrun=FALSE, bugs.as.phyloseq=TRUE)
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool",
dryrun=FALSE)
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool")
curatedMetagenomicData("ZellerG_2014.metaphlan_bugs_list.stool",dryrun=FALSE)
browseVignettes("curatedMetagenomicData")
curatedMetagenomicData("*metaphlan_bugs_list.stool*", dryrun = TRUE)
curatedMetagenomicData("*metaphlan_bugs_list.stool*", dryrun = TRUE,counts = TRUE)
curatedMetagenomicData("*metaphlan_bugs_list.stool*", dryrun = TRUE,counts = TRUE,bugs.as.phyloseq = TRUE)
curatedMetagenomicData("*metaphlan_bugs_list.stool*", dryrun = F,counts = TRUE,bugs.as.phyloseq = TRUE)
loman.eset = LomanNJ_2013.metaphlan_bugs_list.stool()
loman <- curatedMetagenomicData("LomanNJ_2013.metaphlan_bugs_list.stool", dryrun = FALSE)
suppressPackageStartupMessages(library(curatedMetagenomicData))
loman.eset = LomanNJ_2013.metaphlan_bugs_list.stool()
suppressPackageStartupMessages(library(curatedMetagenomicData))
loman.eset = LomanNJ_2013.metaphlan_bugs_list.stool()
remove.packages("curatedMetagenomicData")
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
curatedMetagenomicData("ZellerG*")
ZellerG_2014.genefamilies_relab.stool()
BiocManager::install(version="devel")
BiocManager::valid()
BiocManager::install(version='devel')
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
BiocManager::install("BiocFileCache")
BiocManager::install("BiocFileCache")
library(curatedMetagenomicData)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(curatedMetagenomicData)
ZellerG_2014.metaphlan_bugs_list.stool（）
ZellerG_2014.metaphlan_bugs_list.stool()
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(curatedMetagenomicData)
library(curatedMetagenomicData)
ZellerG_2014.metaphlan_bugs_list.stool()
data1<-eval(parse(text = "FengQ_2015.genefamilies_relab.stool()"))
data1<-eval(parse(text = "FengQ_2015.genefamilies_relab.stool()"))
data1<-eval(parse(text = "FengQ_2015.genefamilies_relab.stool()"))
install.packages("http://bioconductor.org/packages/release/data/experiment/src/contrib/curatedMetagenomicData_1.20.0.tar.gz", repo=NULL, type="source")
install.packages("http://bioconductor.org/packages/release/data/experiment/src/contrib/curatedMetagenomicData_1.12.0.tar.gz", repo=NULL, type="source")
library(phyloseq)
library(ggforce)
library(cowplot)
library(HotLoadings)
source("../eval_functions.R")
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
BiocManager::install("rbibutils")
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(curatedMetagenomicData)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
library(phyloseq)
library(ggforce)
library(cowplot)
library(HotLoadings)
source("../eval_functions.R")
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
?INSTALL
library(BiocManager)
?install
BiocManager::install("curatedMetagenomicData",version = "1.12.3")
?combined_metadata
View(combined_metadata)
table(combined_metadata$antibiotics_current_use)
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
?install.packages
library(curatedMetagenomicData)
# Extraction from HMP Project
HMPData <- curatedMetagenomicData("HMP_2012.metaphlan_bugs_list*",
dryrun = FALSE,
counts = TRUE,
bugs.as.phyloseq = TRUE)
install.packages("devtools", dependencies=T)
install.packages("BiocManager", dependencies=T)
install.packages("tidyverse", dependencies=T)
install.packages('Seurat', dependencies=T)
BiocManager::install(c("SingleR","monocle", "DESeq2"),ask = F,update = F)
BiocManager::install(c("clusterProfiler","DOSE","pheatmap"),ask = F,update = F)
BiocManager::install(c("org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db"),ask = F,update = F)
devtools::install_github('RGLab/MAST', upgrade=F, build_vignettes = T)
install.packages("tidyverse", dependencies = T)
ls
ls
options(stringsAsFactors = F)
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(patchwork) # The Composer of Plots
library(Seurat) # Tools for Single Cell Genomics
library(tidyverse) # Easily Install and Load the 'Tidyverse'
######## Sampling RF model ##########
setwd("K:/CRC-Pair/Unique.Pair.Permutation/Sampling")
SampleNumber <- c(15,20,30,40,50,60,70,80,90,100,200)
SpeciesData2 <- read.table("../../Species-8Study-20201010/EightStudies-SpeciesAbundance-Group.txt",sep = '\t',row.names = 1,stringsAsFactors = F)
ModelImportance <- data.frame()
confusionMatrixdata <- data.frame()
modelROC <- data.frame()
model.AUC <- data.frame()
for (feature in seq(10,50,10)) {
for (SampleN in SampleNumber) {
for (i in 1:10) {
mid <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
SampleData <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-Abundance.csv",sep = ''),row.names = 1)
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) %>% arrange(Enrichment)
TrainData <- SpeciesData2[rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame() %>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
TestData <- SpeciesData2[!rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame()%>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TestData$Label <- factor(TestData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",repeats=5)
fit.rf <- train(Label ~ .,data = TrainData, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(fit.rf, TestData)
cm<-confusionMatrix(rf.pred,TestData$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(confusionMatrixdata)
predob = predict(fit.rf,TestData,type = "prob")
pred<-prediction(predob[,2],TestData$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(AUC=auc) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>% rbind(model.AUC)
ModelImportance<-fit.rf$finalModel$importance %>% data.frame() %>% rownames_to_column()  %>%
mutate(Rank = floor(rank(-MeanDecreaseGini))) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(ModelImportance)
}
}
}
library(tidyverse)
library(readxl)
library(ggpubr)
library(ggstar)
library(fdrtool)
library(qvalue)
library(caret)
library(randomForest)
library(e1071)
library(pROC)
library(ROCR)
library("caTools")
library(sampling)
library(scales)
library(ggpmisc)
library(ggrepel)
library(UpSetR)
library(gridExtra)
library(gridGraphics)
library(pheatmap)
library(ggthemes)
library(ggsci)
library(ComplexHeatmap)
library(ggrepel)
library(randomcoloR)
for (feature in seq(10,50,10)) {
for (SampleN in SampleNumber) {
for (i in 1:10) {
mid <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
SampleData <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-Abundance.csv",sep = ''),row.names = 1)
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) %>% arrange(Enrichment)
TrainData <- SpeciesData2[rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame() %>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
TestData <- SpeciesData2[!rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame()%>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TestData$Label <- factor(TestData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",repeats=5)
fit.rf <- train(Label ~ .,data = TrainData, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(fit.rf, TestData)
cm<-confusionMatrix(rf.pred,TestData$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(confusionMatrixdata)
predob = predict(fit.rf,TestData,type = "prob")
pred<-prediction(predob[,2],TestData$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(AUC=auc) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>% rbind(model.AUC)
ModelImportance<-fit.rf$finalModel$importance %>% data.frame() %>% rownames_to_column()  %>%
mutate(Rank = floor(rank(-MeanDecreaseGini))) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(ModelImportance)
}
}
}
feature=10
SampleN=15
i=1
mid <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
SampleData <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-Abundance.csv",sep = ''),row.names = 1)
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) %>% arrange(Enrichment)
mid
mid %>% top_n(-feature,Decre.aveRank.P)
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) #%>% arrange(Enrichment)
TrainData <- SpeciesData2[rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame() %>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
TestData <- SpeciesData2[!rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame()%>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TestData$Label <- factor(TestData$Label,levels = c(0,1))
TrainData
setwd("K:/CRC-Pair/Unique.Pair.Permutation/Sampling")
SampleNumber <- c(15,20,30,40,50,60,70,80,90,100,200)
SpeciesData2 <- read.table("../../Species-8Study-20201010/EightStudies-SpeciesAbundance-Group.txt",sep = '\t',row.names = 1,stringsAsFactors = F)
ModelImportance <- data.frame()
confusionMatrixdata <- data.frame()
modelROC <- data.frame()
model.AUC <- data.frame()
for (feature in seq(10,50,10)) {
for (SampleN in SampleNumber) {
for (i in 1:10) {
mid <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
SampleData <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-Abundance.csv",sep = ''),row.names = 1)
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) #%>% arrange(Enrichment)
TrainData <- SpeciesData2[rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame() %>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
TestData <- SpeciesData2[!rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame()%>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TestData$Label <- factor(TestData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",repeats=5)
fit.rf <- train(Label ~ .,data = TrainData, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(fit.rf, TestData)
cm<-confusionMatrix(rf.pred,TestData$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(confusionMatrixdata)
predob = predict(fit.rf,TestData,type = "prob")
pred<-prediction(predob[,2],TestData$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(AUC=auc) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>% rbind(model.AUC)
ModelImportance<-fit.rf$finalModel$importance %>% data.frame() %>% rownames_to_column()  %>%
mutate(Rank = floor(rank(-MeanDecreaseGini))) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(ModelImportance)
}
}
}
write.csv(confusionMatrixdata,file = paste("Sampling.RF.model.ConfusionMatrix.csv",sep = ''),row.names = F)
write.csv(model.AUC,file = paste("Sampling.RF.model.AUC.csv",sep = ''),row.names = F)
write.csv(modelROC,file = paste("Sampling.RF.model.ROC.csv",sep = ''),row.names = F)
write.csv(ModelImportance,file = paste("Sampling.RF.model.Importance.csv",sep = ''),row.names = F)
############# LODO RF -> Ave Top 10-50 #############
setwd("K:/CRC-Pair/Unique.Pair.Permutation/LODO.Test")
SpeciesData2 <- read.table("../../Species-8Study-20201010/EightStudies-SpeciesAbundance-Group.txt",sep = '\t',row.names = 1,stringsAsFactors = F)
Study <- c("FengQ_2015","ThomasAM_2018a","ThomasAM_2018b","VogtmannE_2016","YuJ_2015","ZellerG_2014","PRJDB4176","PRJEB27928") #
for (kcount in seq(10,50,10)) {
ModelImportance <- data.frame()
confusionMatrixdata <- data.frame()
modelROC <- data.frame()
model.AUC <- data.frame()
for (name in Study) {
## Process Data
#middata <- get(paste(name,".LODO.wilcoxonsign",sep = ''))
middata <- read.csv(paste("LODO-Exclude.",name,"-Metaphlan2-PairWilcoxonSign.csv",sep = ''))
middata$Incre.aveRank.P <- middata$Increasing.Rank.Average/10001
mid <- data.frame(Pvalue = c(middata$Incre.aveRank.P,middata$Decre.aveRank.P),Species = c(middata$Species,middata$Species))
middataTop30 <- mid %>% arrange(Pvalue) %>% top_n(-kcount,Pvalue)
#middataTop30 <- middata %>% arrange(Decre.aveRank.P) %>% top_n(-kcount,Decre.aveRank.P)
#write.csv(middataTop50,file = paste(name,"-PairTop50.Species.csv",sep = ''),row.names = F)
SpeciesSelectData <- SpeciesData2 %>% select(c(Study,study_condition,middataTop30$Species))
## train test data
TrainData <- SpeciesSelectData %>% filter(Study != name) %>% arrange(study_condition) %>% mutate(Label=if_else(study_condition =="control",0,1)) %>%
select(-study_condition,-Study)
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
## model for self
set.seed(123)
split = sample.split(TrainData$Label,SplitRatio = .7)
train_data = subset(TrainData,split == TRUE)
test_data  = subset(TrainData,split == FALSE)
TrainData$Label<-factor(TrainData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",number=3,repeats=5)
train_data$Label <- factor(train_data$Label,levels = c(0,1))
test_data$Label <- factor(test_data$Label,levels = c(0,1))
fit.rf <- train(Label ~ .,data = train_data, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(fit.rf, test_data)
cm<-confusionMatrix(rf.pred,test_data$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>% mutate(Predict = "Self",ModelExcludeStudy = name) %>%rbind(confusionMatrixdata)
predob = predict(fit.rf,test_data,type = "prob")
pred<-prediction(predob[,2],test_data$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>% mutate(Predict = "Self",ModelExcludeStudy = name) %>%rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(Predict="Self",AUC=auc,ModelExcludeStudy = name) %>% rbind(model.AUC)
ModelImportance<-fit.rf$finalModel$importance %>% data.frame() %>% rownames_to_column()  %>%
mutate(Rank = floor(rank(-MeanDecreaseGini)),Predict = "Self",ModelExcludeStudy = name) %>% rbind(ModelImportance)
## model for exclulded study
TestData <- SpeciesSelectData %>% filter(Study == name) %>% arrange(study_condition) %>% mutate(Label=if_else(study_condition =="control",0,1)) %>%
select(-study_condition,-Study)
TestData$Label <- factor(TestData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",number=5,repeats=5)
rf.fit <- train(Label ~ .,data = TrainData, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(rf.fit, TestData)
cm<-confusionMatrix(rf.pred,TestData$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>% mutate(Predict = name,ModelExcludeStudy = name) %>%rbind(confusionMatrixdata)
predob = predict(rf.fit,TestData,type = "prob")
pred<-prediction(predob[,2],TestData$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>% mutate(Predict  = name,ModelExcludeStudy = name) %>%
rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(Predict=name,AUC=auc,ModelExcludeStudy = name) %>% rbind(model.AUC)
ModelImportance<-rf.fit$finalModel$importance %>% data.frame() %>% rownames_to_column() %>%
mutate(Rank = floor(rank(-MeanDecreaseGini)),Predict = name,ModelExcludeStudy = name) %>% rbind(ModelImportance)
}
write.csv(confusionMatrixdata,file = paste("LODO.Top",kcount,".RF.model.ConfusionMatrix.csv",sep = ''),row.names = F)
write.csv(model.AUC,file = paste("LODO.Top",kcount,".RF.model.AUC.csv",sep = ''),row.names = F)
write.csv(modelROC,file = paste("LODO.Top",kcount,".RF.model.ROC.csv",sep = ''),row.names = F)
write.csv(ModelImportance,file = paste("LODO.Top",kcount,".RF.model.Importance.csv",sep = ''),row.names = F)
}
setwd("K:/CRC-Pair/Unique.Pair.Permutation/Sampling")
SampleNumber <- c(15,20,30,40,50,60,70,80,90,100,200)
SpeciesData2 <- read.table("../../Species-8Study-20201010/EightStudies-SpeciesAbundance-Group.txt",sep = '\t',row.names = 1,stringsAsFactors = F)
ModelImportance <- data.frame()
confusionMatrixdata <- data.frame()
modelROC <- data.frame()
model.AUC <- data.frame()
for (feature in seq(10,50,10)) {
for (SampleN in SampleNumber) {
for (i in 1:10) {
middata <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
SampleData <- read.csv(paste("Sampling-",SampleN,".",i,"-Metaphlan2.Species-Abundance.csv",sep = ''),row.names = 1)
middata$Incre.aveRank.P <- middata$Increasing.Rank.Average/10001
mid <- data.frame(Pvalue = c(middata$Incre.aveRank.P,middata$Decre.aveRank.P),Species = c(middata$Species,middata$Species))
mid2 <- mid %>% arrange(Pvalue) %>% top_n(-feature,Pvalue)
#mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) #%>% arrange(Enrichment)
TrainData <- SpeciesData2[rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame() %>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TrainData$Label <- factor(TrainData$Label,levels = c(0,1))
TestData <- SpeciesData2[!rownames(SpeciesData2) %in% rownames(SampleData),] %>% data.frame()%>%
mutate(Label = if_else(study_condition == "control",0,1)) %>% select(c(mid2$Species,Label))
TestData$Label <- factor(TestData$Label,levels = c(0,1))
control <- trainControl(method="repeatedcv",repeats=5)
fit.rf <- train(Label ~ .,data = TrainData, method = "rf", metric="Accuracy", trControl = control)
rf.pred <- predict(fit.rf, TestData)
cm<-confusionMatrix(rf.pred,TestData$Label)
confusionMatrixdata<-data.frame(cbind(t(cm$overall),t(cm$byClass))) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(confusionMatrixdata)
predob = predict(fit.rf,TestData,type = "prob")
pred<-prediction(predob[,2],TestData$Label)
perf<-performance(pred,'tpr','fpr')
#extrac plot ROC data
modelROC<-data.frame(FPR = unlist(perf@x.values),TPR = unlist(perf@y.values)) %>%
mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(modelROC)
auc<-performance(pred,"auc")
auc<-unlist(slot(auc,"y.values"))
model.AUC <- data.frame(AUC=auc) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>% rbind(model.AUC)
ModelImportance<-fit.rf$finalModel$importance %>% data.frame() %>% rownames_to_column()  %>%
mutate(Rank = floor(rank(-MeanDecreaseGini))) %>% mutate(FeatureCount = feature,Sampling = SampleN*2,RepeatTimes = i) %>%
rbind(ModelImportance)
}
}
}
write.csv(confusionMatrixdata,file = paste("Sampling.RF.model.ConfusionMatrix.csv",sep = ''),row.names = F)
write.csv(model.AUC,file = paste("Sampling.RF.model.AUC.csv",sep = ''),row.names = F)
write.csv(modelROC,file = paste("Sampling.RF.model.ROC.csv",sep = ''),row.names = F)
write.csv(ModelImportance,file = paste("Sampling.RF.model.Importance.csv",sep = ''),row.names = F)
setwd("K:/CRC-Pair/Unique.Pair.Permutation")
#### Fig 3a  => Sampling Intersect Meta  core 7 Species ####
Species7 <- c("Parvimonas_unclassified","Gemella_morbillorum","Peptostreptococcus_stomatis",
"Fusobacterium_nucleatum","Parvimonas_micra","Porphyromonas_asaccharolytica",
"Clostridium_symbiosum")
SampleNumber <- c(15,20,30,40,50,60,70,80,90,100,200)
for (feature in seq(10,50,10)) {
DataList=list()
for (SampleN in SampleNumber) {
Mid <- rep(NA,10)
for (i in 1:10) {
mid <- read.csv(paste("Sampling/Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) #%>% arrange(Enrichment)
Mid[i] <- length(intersect(mid2$Species,Species7))
}
DataList[[as.character(SampleN*2)]] = Mid
}
Data <- data.frame(DataList) %>% mutate(RepeatTimes = 1:10)%>% gather(key="Sampling",value="IntersectSpecies",-RepeatTimes) %>%
mutate(Sampling = str_remove_all(Sampling,"X"))
p<-ggboxplot(Data,x="Sampling",y="IntersectSpecies",color = "Sampling",add = "jitter")+
labs(x="Sampling",y="Intersect Species Count")+
theme_few() + theme(legend.position = "none")
ggsave(p,filename = paste("Figure/Sampling.Top.",feature,".IntersectMeta7.pdf",sep = ''),width = 3,height = 3)
}
setwd("K:/CRC-Pair/Unique.Pair.Permutation")
for (feature in seq(10,50,10)) {
DataList=list()
for (SampleN in SampleNumber) {
Mid <- rep(NA,10)
for (i in 1:10) {
mid <- read.csv(paste("Sampling/Sampling-",SampleN,".",i,"-Metaphlan2.Species-PairwilcoxonSign-res.csv",sep = ''))
mid2 <- mid %>% top_n(-feature,Decre.aveRank.P) %>% arrange(Decre.aveRank.P) #%>% arrange(Enrichment)
Mid[i] <- length(intersect(mid2$Species,Species7))
}
DataList[[as.character(SampleN*2)]] = Mid
}
Data <- data.frame(DataList) %>% mutate(RepeatTimes = 1:10)%>% gather(key="Sampling",value="IntersectSpecies",-RepeatTimes) %>%
mutate(Sampling = str_remove_all(Sampling,"X"))
p<-ggboxplot(Data,x="Sampling",y="IntersectSpecies",color = "Sampling",add = "jitter")+
labs(x="Sampling",y="Intersect Species Count")+
theme_few() + theme(legend.position = "none")
ggsave(p,filename = paste("Figure/Sampling.Top.",feature,".IntersectMeta7.pdf",sep = ''),width = 3,height = 3)
}
